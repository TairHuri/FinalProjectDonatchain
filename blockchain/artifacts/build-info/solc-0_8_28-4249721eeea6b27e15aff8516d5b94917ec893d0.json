{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-4249721eeea6b27e15aff8516d5b94917ec893d0",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/Counter.sol": "project/contracts/Counter.sol",
    "contracts/Donatchain.sol": "project/contracts/Donatchain.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "cancun",
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": []
    },
    "sources": {
      "project/contracts/Counter.sol": {
        "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.28;\n\ncontract Counter {\n  uint public x;\n\n  event Increment(uint by);\n\n  function inc() public {\n    x++;\n    emit Increment(1);\n  }\n\n  function incBy(uint by) public {\n    require(by > 0, \"incBy: increment should be positive\");\n    x += by;\n    emit Increment(by);\n  }\n}\n"
      },
      "project/contracts/Donatchain.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.19;\r\n\r\ncontract Donatchain {\r\n    // -------- הרשאות בסיסיות --------\r\n    address public owner;\r\n    modifier onlyOwner() { require(msg.sender == owner, \"not owner\"); _; }\r\n\r\n    // Pause\r\n    bool public paused;\r\n    modifier whenNotPaused() { require(!paused, \"paused\"); _; }\r\n    function setPaused(bool p) external onlyOwner { paused = p; }\r\n\r\n    // -------- מודל קמפיין --------\r\n    struct Campaign {\r\n        // מזהי תצוגה (לא חובה לשמור on-chain, אבל אם תרצי — הנה)\r\n        uint256 campaignId;\r\n        string  campaignName;\r\n        uint256 charityId;\r\n        string  charityName;\r\n\r\n        // מצטברים\r\n        uint256 totalCrypto;   // ב-wei\r\n        uint256 totalFiat;     // באגורות/סנטים (יחידות קטנות off-chain)\r\n\r\n        // הרשאות ויעד\r\n        address manager;       // בעל/מנהל הקמפיין\r\n        address beneficiary;   // ארנק העמותה שמקבל את ה-ETH\r\n\r\n        bool    active;        // האם פתוח לתרומות\r\n    }\r\n\r\n    // מזהה רץ\r\n    uint256 public nextCampaignId;\r\n    mapping(uint256 => Campaign) public campaigns;\r\n\r\n    // מנהל הקמפיין או סופר-אדמין\r\n    modifier onlyOwnerOrManager(uint256 campaignId) {\r\n        require(\r\n            msg.sender == owner || msg.sender == campaigns[campaignId].manager,\r\n            \"not manager/owner\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    // -------- אירועים לשקיפות --------\r\n    event CampaignCreated(\r\n        uint256 indexed campaignId,\r\n        string  campaignName,\r\n        uint256 charityId,\r\n        string  charityName,\r\n        address beneficiary,\r\n        address manager\r\n    );\r\n\r\n    event CampaignUpdated(\r\n        uint256 indexed campaignId,\r\n        string  campaignName,\r\n        uint256 charityId,\r\n        string  charityName,\r\n        address beneficiary,\r\n        bool    active\r\n    );\r\n\r\n    event CryptoDonation(\r\n        uint256 indexed campaignId,\r\n        address indexed donor,\r\n        uint256 amount\r\n    );\r\n\r\n    event FiatDonationRecorded(\r\n        uint256 indexed campaignId,\r\n        uint256 amount,\r\n        string  currency,\r\n        string  refCode\r\n    );\r\n\r\n    // -------- בנאי --------\r\n    constructor() {\r\n        owner = msg.sender;\r\n        paused = false;\r\n    }\r\n\r\n    // -------- יצירת/עדכון קמפיין --------\r\n\r\n    function createCampaign(\r\n        string  calldata campaignName,\r\n        uint256         charityId,\r\n        string  calldata charityName,\r\n        address         beneficiary\r\n    )\r\n        external\r\n        returns (uint256 id)\r\n    {\r\n        require(bytes(campaignName).length > 0, \"empty name\");\r\n        require(bytes(charityName).length  > 0, \"empty charity name\");\r\n        require(beneficiary != address(0), \"bad beneficiary\");\r\n\r\n        id = nextCampaignId++;\r\n\r\n        campaigns[id] = Campaign({\r\n            campaignId:   id,\r\n            campaignName: campaignName,\r\n            charityId:    charityId,\r\n            charityName:  charityName,\r\n            totalCrypto:  0,\r\n            totalFiat:    0,\r\n            manager:      msg.sender,\r\n            beneficiary:  beneficiary,\r\n            active:       true\r\n        });\r\n\r\n        emit CampaignCreated(\r\n            id,\r\n            campaignName,\r\n            charityId,\r\n            charityName,\r\n            beneficiary,\r\n            msg.sender\r\n        );\r\n    }\r\n\r\n    function updateCampaign(\r\n        uint256 campaignId,\r\n        string  calldata campaignName,\r\n        uint256         charityId,\r\n        string  calldata charityName,\r\n        address         beneficiary,\r\n        bool            active\r\n    )\r\n        external\r\n        onlyOwnerOrManager(campaignId)\r\n    {\r\n        Campaign storage c = campaigns[campaignId];\r\n        require(c.manager != address(0), \"unknown campaign\");\r\n        require(beneficiary != address(0), \"bad beneficiary\");\r\n\r\n        c.campaignName = campaignName;\r\n        c.charityName  = charityName;\r\n        c.charityId    = charityId;\r\n        c.beneficiary  = beneficiary;\r\n        c.active       = active;\r\n\r\n        emit CampaignUpdated(\r\n            campaignId,\r\n            campaignName,\r\n            charityId,\r\n            charityName,\r\n            beneficiary,\r\n            active\r\n        );\r\n    }\r\n\r\n    // -------- תרומה בקריפטו (ETH) --------\r\n    function donateCrypto(uint256 campaignId)\r\n        external\r\n        payable\r\n        whenNotPaused\r\n    {\r\n        Campaign storage c = campaigns[campaignId];\r\n        require(c.beneficiary != address(0), \"unknown campaign\");\r\n        require(c.active, \"inactive\");\r\n        require(msg.value > 0, \"no value\");\r\n\r\n        c.totalCrypto += msg.value;\r\n\r\n        (bool ok,) = c.beneficiary.call{value: msg.value}(\"\");\r\n        require(ok, \"transfer failed\");\r\n\r\n        emit CryptoDonation(campaignId, msg.sender, msg.value);\r\n    }\r\n\r\n    // -------- רישום תרומת אשראי --------\r\n    function recordFiatDonation(\r\n        uint256 campaignId,\r\n        uint256 amountFiat,\r\n        string  calldata currency,\r\n        string  calldata refCode\r\n    )\r\n        external\r\n        onlyOwner\r\n    {\r\n        Campaign storage c = campaigns[campaignId];\r\n        require(c.beneficiary != address(0), \"unknown campaign\");\r\n        require(amountFiat > 0, \"amount=0\");\r\n\r\n        c.totalFiat += amountFiat;\r\n\r\n        emit FiatDonationRecorded(campaignId, amountFiat, currency, refCode);\r\n    }\r\n\r\n    // -------- עזר --------\r\n    function transferOwnership(address newOwner) external onlyOwner {\r\n        require(newOwner != address(0), \"bad owner\");\r\n        owner = newOwner;\r\n    }\r\n}\r\n"
      }
    }
  }
}