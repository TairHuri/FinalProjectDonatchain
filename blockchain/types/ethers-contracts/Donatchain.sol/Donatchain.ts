/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "../common.js"
  

  export interface DonatchainInterface extends Interface {
    getFunction(nameOrSignature: "campaigns" | "createCampaign" | "donateCrypto" | "nextCampaignId" | "owner" | "paused" | "recordFiatDonation" | "setPaused" | "transferOwnership" | "updateCampaign"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "CampaignCreated" | "CampaignUpdated" | "CryptoDonation" | "FiatDonationRecorded"): EventFragment;

    encodeFunctionData(functionFragment: 'campaigns', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'createCampaign', values: [string, BigNumberish, string, AddressLike]): string;
encodeFunctionData(functionFragment: 'donateCrypto', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'nextCampaignId', values?: undefined): string;
encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
encodeFunctionData(functionFragment: 'paused', values?: undefined): string;
encodeFunctionData(functionFragment: 'recordFiatDonation', values: [BigNumberish, BigNumberish, string, string]): string;
encodeFunctionData(functionFragment: 'setPaused', values: [boolean]): string;
encodeFunctionData(functionFragment: 'transferOwnership', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'updateCampaign', values: [BigNumberish, string, BigNumberish, string, AddressLike, boolean]): string;

    decodeFunctionResult(functionFragment: 'campaigns', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'createCampaign', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'donateCrypto', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'nextCampaignId', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'recordFiatDonation', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'setPaused', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'updateCampaign', data: BytesLike): Result;
  }

  
    export namespace CampaignCreatedEvent {
      export type InputTuple = [campaignId: BigNumberish, campaignName: string, charityId: BigNumberish, charityName: string, beneficiary: AddressLike, manager: AddressLike];
      export type OutputTuple = [campaignId: bigint, campaignName: string, charityId: bigint, charityName: string, beneficiary: string, manager: string];
      export interface OutputObject {campaignId: bigint, campaignName: string, charityId: bigint, charityName: string, beneficiary: string, manager: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace CampaignUpdatedEvent {
      export type InputTuple = [campaignId: BigNumberish, campaignName: string, charityId: BigNumberish, charityName: string, beneficiary: AddressLike, active: boolean];
      export type OutputTuple = [campaignId: bigint, campaignName: string, charityId: bigint, charityName: string, beneficiary: string, active: boolean];
      export interface OutputObject {campaignId: bigint, campaignName: string, charityId: bigint, charityName: string, beneficiary: string, active: boolean };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace CryptoDonationEvent {
      export type InputTuple = [campaignId: BigNumberish, donor: AddressLike, amount: BigNumberish];
      export type OutputTuple = [campaignId: bigint, donor: string, amount: bigint];
      export interface OutputObject {campaignId: bigint, donor: string, amount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace FiatDonationRecordedEvent {
      export type InputTuple = [campaignId: BigNumberish, amount: BigNumberish, currency: string, refCode: string];
      export type OutputTuple = [campaignId: bigint, amount: bigint, currency: string, refCode: string];
      export interface OutputObject {campaignId: bigint, amount: bigint, currency: string, refCode: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface Donatchain extends BaseContract {
    
    connect(runner?: ContractRunner | null): Donatchain;
    waitForDeployment(): Promise<this>;

    interface: DonatchainInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    campaigns: TypedContractMethod<
      [arg0: BigNumberish, ],
      [[bigint, string, bigint, string, bigint, bigint, string, string, boolean] & {campaignId: bigint, campaignName: string, charityId: bigint, charityName: string, totalCrypto: bigint, totalFiat: bigint, manager: string, beneficiary: string, active: boolean }],
      'view'
    >
    

    
    createCampaign: TypedContractMethod<
      [campaignName: string, charityId: BigNumberish, charityName: string, beneficiary: AddressLike, ],
      [bigint],
      'nonpayable'
    >
    

    
    donateCrypto: TypedContractMethod<
      [campaignId: BigNumberish, ],
      [void],
      'payable'
    >
    

    
    nextCampaignId: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    owner: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    paused: TypedContractMethod<
      [],
      [boolean],
      'view'
    >
    

    
    recordFiatDonation: TypedContractMethod<
      [campaignId: BigNumberish, amountFiat: BigNumberish, currency: string, refCode: string, ],
      [void],
      'nonpayable'
    >
    

    
    setPaused: TypedContractMethod<
      [p: boolean, ],
      [void],
      'nonpayable'
    >
    

    
    transferOwnership: TypedContractMethod<
      [newOwner: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    updateCampaign: TypedContractMethod<
      [campaignId: BigNumberish, campaignName: string, charityId: BigNumberish, charityName: string, beneficiary: AddressLike, active: boolean, ],
      [void],
      'nonpayable'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'campaigns'): TypedContractMethod<
      [arg0: BigNumberish, ],
      [[bigint, string, bigint, string, bigint, bigint, string, string, boolean] & {campaignId: bigint, campaignName: string, charityId: bigint, charityName: string, totalCrypto: bigint, totalFiat: bigint, manager: string, beneficiary: string, active: boolean }],
      'view'
    >;
getFunction(nameOrSignature: 'createCampaign'): TypedContractMethod<
      [campaignName: string, charityId: BigNumberish, charityName: string, beneficiary: AddressLike, ],
      [bigint],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'donateCrypto'): TypedContractMethod<
      [campaignId: BigNumberish, ],
      [void],
      'payable'
    >;
getFunction(nameOrSignature: 'nextCampaignId'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'owner'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'paused'): TypedContractMethod<
      [],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'recordFiatDonation'): TypedContractMethod<
      [campaignId: BigNumberish, amountFiat: BigNumberish, currency: string, refCode: string, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'setPaused'): TypedContractMethod<
      [p: boolean, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'transferOwnership'): TypedContractMethod<
      [newOwner: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'updateCampaign'): TypedContractMethod<
      [campaignId: BigNumberish, campaignName: string, charityId: BigNumberish, charityName: string, beneficiary: AddressLike, active: boolean, ],
      [void],
      'nonpayable'
    >;

    getEvent(key: 'CampaignCreated'): TypedContractEvent<CampaignCreatedEvent.InputTuple, CampaignCreatedEvent.OutputTuple, CampaignCreatedEvent.OutputObject>;
getEvent(key: 'CampaignUpdated'): TypedContractEvent<CampaignUpdatedEvent.InputTuple, CampaignUpdatedEvent.OutputTuple, CampaignUpdatedEvent.OutputObject>;
getEvent(key: 'CryptoDonation'): TypedContractEvent<CryptoDonationEvent.InputTuple, CryptoDonationEvent.OutputTuple, CryptoDonationEvent.OutputObject>;
getEvent(key: 'FiatDonationRecorded'): TypedContractEvent<FiatDonationRecordedEvent.InputTuple, FiatDonationRecordedEvent.OutputTuple, FiatDonationRecordedEvent.OutputObject>;

    filters: {
      
      'CampaignCreated(uint256,string,uint256,string,address,address)': TypedContractEvent<CampaignCreatedEvent.InputTuple, CampaignCreatedEvent.OutputTuple, CampaignCreatedEvent.OutputObject>;
      CampaignCreated: TypedContractEvent<CampaignCreatedEvent.InputTuple, CampaignCreatedEvent.OutputTuple, CampaignCreatedEvent.OutputObject>;
    

      'CampaignUpdated(uint256,string,uint256,string,address,bool)': TypedContractEvent<CampaignUpdatedEvent.InputTuple, CampaignUpdatedEvent.OutputTuple, CampaignUpdatedEvent.OutputObject>;
      CampaignUpdated: TypedContractEvent<CampaignUpdatedEvent.InputTuple, CampaignUpdatedEvent.OutputTuple, CampaignUpdatedEvent.OutputObject>;
    

      'CryptoDonation(uint256,address,uint256)': TypedContractEvent<CryptoDonationEvent.InputTuple, CryptoDonationEvent.OutputTuple, CryptoDonationEvent.OutputObject>;
      CryptoDonation: TypedContractEvent<CryptoDonationEvent.InputTuple, CryptoDonationEvent.OutputTuple, CryptoDonationEvent.OutputObject>;
    

      'FiatDonationRecorded(uint256,uint256,string,string)': TypedContractEvent<FiatDonationRecordedEvent.InputTuple, FiatDonationRecordedEvent.OutputTuple, FiatDonationRecordedEvent.OutputObject>;
      FiatDonationRecorded: TypedContractEvent<FiatDonationRecordedEvent.InputTuple, FiatDonationRecordedEvent.OutputTuple, FiatDonationRecordedEvent.OutputObject>;
    
    };
  }